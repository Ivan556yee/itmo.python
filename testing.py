import csv
import random

def read_line(reader):
    """–ß–∏—Ç–∞–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    fields = next(reader)
    print(" | ".join(fields))
    return fields

def slice(book_list, start, end):
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ä–µ–∑ —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
    book_list.seek(0)
    reader = csv.reader(book_list, delimiter=",")
    for i in range(end):
        if i >= start:
            read_line(reader)
        else:
            next(reader)

def count_long_titles(book_list):
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –¥–ª–∏–Ω–Ω–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤"""
    book_list.seek(0)
    reader = csv.DictReader(book_list, delimiter=",")
    c = 0
    for r in reader:
        largeword = r["Book-Title"]
        if len(largeword) > 30:
            c += 1
    
    # –í–´–í–û–î–ò–ú —Ä–µ–∑—É–ª—å—Ç–∞—Ç!
    print(f'üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –¥–ª–∏–Ω–Ω–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤: {c}')
    return c

def find_books_by_author(book_list, author_name):
    """–ò—â–µ—Ç –∫–Ω–∏–≥–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞ –∑–∞ 1991 –∏ 1996 –≥–æ–¥—ã"""
    book_list.seek(0)
    reader = csv.DictReader(book_list, delimiter=",")
    found_books = []
    
    for row in reader:
        if (row["Book-Author"].lower() == author_name.lower() and 
            row["Year-Of-Publication"] in ['1991', '1996']):
            found_books.append(row)
    
    print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥ –∞–≤—Ç–æ—Ä–∞ '{author_name}' –∑–∞ 1991-1996 –≥–æ–¥—ã: {len(found_books)}")
    for book in found_books:
        print(f"   - '{book['Book-Title']}' ({book['Year-Of-Publication']})")
    
    return found_books

def generate_bibliography(book_list, num_entries=20):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–Ω–∏–≥"""
    book_list.seek(0)
    reader = csv.DictReader(book_list, delimiter=",")
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–Ω–∏–≥–∏
    all_books = [row for row in reader if row["Book-Author"] and row["Book-Title"]]
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ
    selected_books = random.sample(all_books, min(num_entries, len(all_books)))
    
    # –°–æ–∑–¥–∞–µ–º –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏
    bibliography = []
    for i, book in enumerate(selected_books, 1):
        citation = f"{book['Book-Author']}. {book['Book-Title']} - {book['Year-Of-Publication']}"
        bibliography.append(f"{i}. {citation}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open("bibliography.txt", "w", encoding="utf-8") as f:
        f.write("\n".join(bibliography))
    
    print(f"\n‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(bibliography)} –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫")
    print("üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: bibliography.txt")
    
    return bibliography

if __name__ == '__main__':
    try:
        with open("books-en.csv", encoding='utf-8') as book_list:
            print("=" * 50)
            print("üìö –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–ó–ê –ë–ò–ë–õ–ò–û–¢–ï–ö–ò")
            print("=" * 50)
            
            reader = csv.reader(book_list, delimiter=",")
            read_line(reader)  # –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            
            # –ó–ê–î–ê–ß–ê 1: –ü–æ–¥—Å—á–µ—Ç –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
            print("\n1. –ü–û–î–°–ß–ï–¢ –ö–ù–ò–ì –° –î–õ–ò–ù–ù–´–ú–ò –ù–ê–ó–í–ê–ù–ò–Ø–ú–ò")
            count_long_titles(book_list)
            
            # –ó–ê–î–ê–ß–ê 2: –ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ –∞–≤—Ç–æ—Ä—É
            print("\n2. –ü–û–ò–°–ö –ö–ù–ò–ì –ü–û –ê–í–¢–û–†–£")
            author = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: ").strip()
            if author:
                find_books_by_author(book_list, author)
            else:
                print("‚ùå –ò–º—è –∞–≤—Ç–æ—Ä–∞ –Ω–µ –≤–≤–µ–¥–µ–Ω–æ")
            
            # –ó–ê–î–ê–ß–ê 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–±–ª–∏–æ–≥—Ä–∞—Ñ–∏–∏
            print("\n3. –ì–ï–ù–ï–†–ê–¶–ò–Ø –ë–ò–ë–õ–ò–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–• –°–°–´–õ–û–ö")
            generate_bibliography(book_list)
            
    except FileNotFoundError:
        print("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª 'books-en.csv' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")